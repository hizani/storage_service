// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: storage/storage.proto

package storage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorageServiceClient is the client API for StorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageServiceClient interface {
	CreateCustomer(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*CustomerResponce, error)
	ReadCustomer(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*CustomerResponce, error)
	DeleteCustomer(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*CustomerResponce, error)
	ReadCustomerBySearchField(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*CustomerResponce, error)
	ReadCustomerFieldById(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*CustomerResponce, error)
	CreateShop(ctx context.Context, in *ShopRequest, opts ...grpc.CallOption) (*ShopResponce, error)
	ReadShop(ctx context.Context, in *ShopRequest, opts ...grpc.CallOption) (*ShopResponce, error)
	DeleteShop(ctx context.Context, in *ShopRequest, opts ...grpc.CallOption) (*ShopResponce, error)
	ReadShopBySearchField(ctx context.Context, in *ShopRequest, opts ...grpc.CallOption) (*ShopResponce, error)
	ReadShopFieldById(ctx context.Context, in *ShopRequest, opts ...grpc.CallOption) (*ShopResponce, error)
}

type storageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageServiceClient(cc grpc.ClientConnInterface) StorageServiceClient {
	return &storageServiceClient{cc}
}

func (c *storageServiceClient) CreateCustomer(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*CustomerResponce, error) {
	out := new(CustomerResponce)
	err := c.cc.Invoke(ctx, "/storage.StorageService/CreateCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) ReadCustomer(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*CustomerResponce, error) {
	out := new(CustomerResponce)
	err := c.cc.Invoke(ctx, "/storage.StorageService/ReadCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) DeleteCustomer(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*CustomerResponce, error) {
	out := new(CustomerResponce)
	err := c.cc.Invoke(ctx, "/storage.StorageService/DeleteCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) ReadCustomerBySearchField(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*CustomerResponce, error) {
	out := new(CustomerResponce)
	err := c.cc.Invoke(ctx, "/storage.StorageService/ReadCustomerBySearchField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) ReadCustomerFieldById(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*CustomerResponce, error) {
	out := new(CustomerResponce)
	err := c.cc.Invoke(ctx, "/storage.StorageService/ReadCustomerFieldById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) CreateShop(ctx context.Context, in *ShopRequest, opts ...grpc.CallOption) (*ShopResponce, error) {
	out := new(ShopResponce)
	err := c.cc.Invoke(ctx, "/storage.StorageService/CreateShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) ReadShop(ctx context.Context, in *ShopRequest, opts ...grpc.CallOption) (*ShopResponce, error) {
	out := new(ShopResponce)
	err := c.cc.Invoke(ctx, "/storage.StorageService/ReadShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) DeleteShop(ctx context.Context, in *ShopRequest, opts ...grpc.CallOption) (*ShopResponce, error) {
	out := new(ShopResponce)
	err := c.cc.Invoke(ctx, "/storage.StorageService/DeleteShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) ReadShopBySearchField(ctx context.Context, in *ShopRequest, opts ...grpc.CallOption) (*ShopResponce, error) {
	out := new(ShopResponce)
	err := c.cc.Invoke(ctx, "/storage.StorageService/ReadShopBySearchField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) ReadShopFieldById(ctx context.Context, in *ShopRequest, opts ...grpc.CallOption) (*ShopResponce, error) {
	out := new(ShopResponce)
	err := c.cc.Invoke(ctx, "/storage.StorageService/ReadShopFieldById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServiceServer is the server API for StorageService service.
// All implementations must embed UnimplementedStorageServiceServer
// for forward compatibility
type StorageServiceServer interface {
	CreateCustomer(context.Context, *CustomerRequest) (*CustomerResponce, error)
	ReadCustomer(context.Context, *CustomerRequest) (*CustomerResponce, error)
	DeleteCustomer(context.Context, *CustomerRequest) (*CustomerResponce, error)
	ReadCustomerBySearchField(context.Context, *CustomerRequest) (*CustomerResponce, error)
	ReadCustomerFieldById(context.Context, *CustomerRequest) (*CustomerResponce, error)
	CreateShop(context.Context, *ShopRequest) (*ShopResponce, error)
	ReadShop(context.Context, *ShopRequest) (*ShopResponce, error)
	DeleteShop(context.Context, *ShopRequest) (*ShopResponce, error)
	ReadShopBySearchField(context.Context, *ShopRequest) (*ShopResponce, error)
	ReadShopFieldById(context.Context, *ShopRequest) (*ShopResponce, error)
	mustEmbedUnimplementedStorageServiceServer()
}

// UnimplementedStorageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStorageServiceServer struct {
}

func (UnimplementedStorageServiceServer) CreateCustomer(context.Context, *CustomerRequest) (*CustomerResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomer not implemented")
}
func (UnimplementedStorageServiceServer) ReadCustomer(context.Context, *CustomerRequest) (*CustomerResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadCustomer not implemented")
}
func (UnimplementedStorageServiceServer) DeleteCustomer(context.Context, *CustomerRequest) (*CustomerResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomer not implemented")
}
func (UnimplementedStorageServiceServer) ReadCustomerBySearchField(context.Context, *CustomerRequest) (*CustomerResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadCustomerBySearchField not implemented")
}
func (UnimplementedStorageServiceServer) ReadCustomerFieldById(context.Context, *CustomerRequest) (*CustomerResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadCustomerFieldById not implemented")
}
func (UnimplementedStorageServiceServer) CreateShop(context.Context, *ShopRequest) (*ShopResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShop not implemented")
}
func (UnimplementedStorageServiceServer) ReadShop(context.Context, *ShopRequest) (*ShopResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadShop not implemented")
}
func (UnimplementedStorageServiceServer) DeleteShop(context.Context, *ShopRequest) (*ShopResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShop not implemented")
}
func (UnimplementedStorageServiceServer) ReadShopBySearchField(context.Context, *ShopRequest) (*ShopResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadShopBySearchField not implemented")
}
func (UnimplementedStorageServiceServer) ReadShopFieldById(context.Context, *ShopRequest) (*ShopResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadShopFieldById not implemented")
}
func (UnimplementedStorageServiceServer) mustEmbedUnimplementedStorageServiceServer() {}

// UnsafeStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServiceServer will
// result in compilation errors.
type UnsafeStorageServiceServer interface {
	mustEmbedUnimplementedStorageServiceServer()
}

func RegisterStorageServiceServer(s grpc.ServiceRegistrar, srv StorageServiceServer) {
	s.RegisterService(&StorageService_ServiceDesc, srv)
}

func _StorageService_CreateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).CreateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.StorageService/CreateCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).CreateCustomer(ctx, req.(*CustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_ReadCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).ReadCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.StorageService/ReadCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).ReadCustomer(ctx, req.(*CustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_DeleteCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).DeleteCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.StorageService/DeleteCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).DeleteCustomer(ctx, req.(*CustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_ReadCustomerBySearchField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).ReadCustomerBySearchField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.StorageService/ReadCustomerBySearchField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).ReadCustomerBySearchField(ctx, req.(*CustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_ReadCustomerFieldById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).ReadCustomerFieldById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.StorageService/ReadCustomerFieldById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).ReadCustomerFieldById(ctx, req.(*CustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_CreateShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).CreateShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.StorageService/CreateShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).CreateShop(ctx, req.(*ShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_ReadShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).ReadShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.StorageService/ReadShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).ReadShop(ctx, req.(*ShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_DeleteShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).DeleteShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.StorageService/DeleteShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).DeleteShop(ctx, req.(*ShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_ReadShopBySearchField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).ReadShopBySearchField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.StorageService/ReadShopBySearchField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).ReadShopBySearchField(ctx, req.(*ShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_ReadShopFieldById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).ReadShopFieldById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.StorageService/ReadShopFieldById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).ReadShopFieldById(ctx, req.(*ShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageService_ServiceDesc is the grpc.ServiceDesc for StorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storage.StorageService",
	HandlerType: (*StorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCustomer",
			Handler:    _StorageService_CreateCustomer_Handler,
		},
		{
			MethodName: "ReadCustomer",
			Handler:    _StorageService_ReadCustomer_Handler,
		},
		{
			MethodName: "DeleteCustomer",
			Handler:    _StorageService_DeleteCustomer_Handler,
		},
		{
			MethodName: "ReadCustomerBySearchField",
			Handler:    _StorageService_ReadCustomerBySearchField_Handler,
		},
		{
			MethodName: "ReadCustomerFieldById",
			Handler:    _StorageService_ReadCustomerFieldById_Handler,
		},
		{
			MethodName: "CreateShop",
			Handler:    _StorageService_CreateShop_Handler,
		},
		{
			MethodName: "ReadShop",
			Handler:    _StorageService_ReadShop_Handler,
		},
		{
			MethodName: "DeleteShop",
			Handler:    _StorageService_DeleteShop_Handler,
		},
		{
			MethodName: "ReadShopBySearchField",
			Handler:    _StorageService_ReadShopBySearchField_Handler,
		},
		{
			MethodName: "ReadShopFieldById",
			Handler:    _StorageService_ReadShopFieldById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage/storage.proto",
}
